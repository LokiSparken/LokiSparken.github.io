{"meta":{"title":"sparken's blog","subtitle":null,"description":"Be patient.","author":"Sparken","url":"https://LokiSparken.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-08-06T17:24:22.141Z","updated":"2020-08-06T17:24:22.141Z","comments":true,"path":"categories/index.html","permalink":"https://lokisparken.github.io/categories/index.html","excerpt":"","text":""},{"title":"链接","date":"2020-08-06T17:39:05.378Z","updated":"2020-08-06T17:39:05.378Z","comments":true,"path":"friends/index.html","permalink":"https://lokisparken.github.io/friends/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-08-06T17:24:24.826Z","updated":"2020-08-06T17:24:24.826Z","comments":true,"path":"tags/index.html","permalink":"https://lokisparken.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"【UE4】花式导入 DLL（一）","slug":"【UE4】花式导入 DLL（一）","date":"2020-10-13T15:59:16.000Z","updated":"2020-10-13T17:39:20.182Z","comments":true,"path":"2020/10/13/【UE4】花式导入 DLL（一）/","link":"","permalink":"https://lokisparken.github.io/2020/10/13/%E3%80%90UE4%E3%80%91%E8%8A%B1%E5%BC%8F%E5%AF%BC%E5%85%A5%20DLL%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"一、配置环境 Windows 10 Unreal Engine 4.24 Visual Studio 2017","text":"一、配置环境 Windows 10 Unreal Engine 4.24 Visual Studio 2017 二、创建一个简单的 DLL 库 VS2017 新建项目 Windows 控制台应用程序 ConsoleApplication - DLLProducer1 修改项目配置属性 平台：x64 项目 - 属性 - 配置属性 - 常规 - 配置类型：dll 创建头文件、源文件 DLLProducer1.h、DLLProducer1.cpp 1234567891011// .h#pragma once#define DLL_EXPORT __declspec(dllexport)#ifdef __cplusplusextern \"C\"&#123; #endif float DLL_EXPORT getCircleArea(float radius); #ifdef __cplusplus&#125;#endif 123456// .cpp#include \"DLLProducer1.h\"float DLL_EXPORT getCircleArea(float radius)&#123; return (3.14 * (radius * radius));&#125; F7 编译，在 x64 目录下得到 .dll 三、在 UE 4.24 中导入（1）蓝图可调用 将 .dll 加入到 UE4 工程 在 UE4 项目文件根目录下新建文件夹 Plugins 复制 .dll 到 Plugins 创建UE4项目的新C++类 DLLInvokeTest New C++ Class 父类 Blueprint Function Library 头文件 1234567891011121314151617181920// DLLInvokeTest.hUCLASS()class DLLTEST_API UDLLTest : public UBlueprintFunctionLibrary&#123; GENERATED_BODY()public: UDLLTest(); // 声明加载 DLL 的函数 UFUNCTION(BlueprintCallable, Category = \"MyDllInvokeTest\") static bool importDll(FString folder, FString name); // 声明导入 DLL 库中具体函数的方法 UFUNCTION(BlueprintCallable, Category = \"MyDllInvokeTest\") static bool importMethodGetCircleAreaFromDll(); // 声明从 DLL 引入函数后的调用接口 UFUNCTION(BlueprintCallable, Category = \"MyDllInvokeTest\") static float getCircleArea(float radius);&#125;; 源文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879// DLLInvokeTest.cpp#include \"DLLInvokeTest.h\"#include \"Runtime/Core/Public/Misc/Paths.h\" // using FPaths#include \"Runtime/Core/Public/HoloLens/HoloLensPlatformProcess.h\" // using FPlatformProcess// 1. 声明用于存储相应 DLL 函数的方法typedef float(*_getCircleArea)(float radius);// 2. 加载 DLL 库void *dllHandle;bool UDLLTest::importDll(FString folder, FString name)&#123; // *FPaths::GamePluginsDir() 为项目插件目录，若使用引擎目录则为EnginePluginsDir() FString filePath = *FPaths::GamePluginsDir() + folder + \"/\" + name; if (FPaths::FileExists(filePath)) &#123; // 获取DLL库 dllHandle = FPlatformProcess::GetDllHandle(*filePath); if (dllHandle != NULL) &#123; return true; &#125; &#125; return false;&#125;// 3. 从 DLL 库中导入具体的函数_getCircleArea m_getCircleAreaFromDll; // 创建实例bool UDLLTest::importMethodGetCircleAreaFromDll()&#123; if (dllHandle != NULL) &#123; m_getCircleAreaFromDll = NULL; FString procName = \"getCircleArea\"; // DLL 库中的函数名，严格对应 m_getCircleAreaFromDll = (_getCircleArea)FPlatformProcess::GetDllExport(dllHandle, *procName); if (m_getCircleAreaFromDll != NULL) &#123; return true; &#125; &#125; return false;&#125;// 4. 供调用的接口float UDLLTest::getCircleArea(float radius)&#123; if (m_getCircleAreaFromDll != NULL) &#123; float out = m_getCircleAreaFromDll(radius); // 调用 UE_LOG(LogTemp, Warning, TEXT(\"Successly call method &lt;getCircleAreaFromDll&gt; from DLL library.\")); return out; &#125; UE_LOG(LogTemp, Warning, TEXT(\"Failed to call method &lt;getCircleAreaFromDll&gt; from DLL library.\")); return 1.0f;&#125;// 在该类构造期间就加载DLL库及相关函数UDLLTest::UDLLTest()&#123; // 调用 DLL 库的加载函数 if (importDll(\"DLL\", \"DLLProducer1.dll\")) &#123; UE_LOG(LogTemp, Warning, TEXT(\"DLL load ok.\")); &#125; else &#123; UE_LOG(LogTemp, Warning, TEXT(\"DLL load failed.\")); &#125; // 调用函数导入 if (importMethodGetCircleAreaFromDll()) &#123; UE_LOG(LogTemp, Warning, TEXT(\"method &lt;getCircleArea&gt; load ok.\")); &#125; else &#123; UE_LOG(LogTemp, Warning, TEXT(\"method &lt;getCircleArea&gt; load failed.\")); &#125;&#125; 新建蓝图，在 Event Graph 中即可调用 getCircleArea() 函数 问题： 可能和 UE4 耦合度略高，测自定义类型的时候 UE4 总会报错提示需要其为 UE4 类型。 （当然后来发现实际上也可能是库的依赖问题导致加载 DLL 就失败，只是 UE4 报错总会口胡（逃 四、在 UE 4.24 中导入（2）纯净 C++ 版 注意： 以下可忽略，与（1）基本相同，只是把继承自 UE4 类的相关部分剥离 将 .dll 加入到 UE4 工程 在 UE4 项目文件根目录下新建文件夹 Plugins 复制 .dll 到 Plugins 创建UE4项目的新C++类 DLLImporter New C++ Class 父类 None 头文件 123456789101112131415161718// DLLImporter.htypedef double(*_getCircleAreaFromDll)(double radius);class DLLTEST_API DLLImporter&#123;private: void *dllHandle, *dllHandleForPackage; _getCircleAreaFromDll m_getCircleAreaFromDll;public: DLLImporter(); ~DLLImporter(); bool importDLL(FString folder, FString name); bool importDLLForPackage(); bool importMethodGetCircleAreaFromDll(); double getCircleArea(double radius);&#125;; 源文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768// DLLImporter.cpp#include \"DLLImporter.h\"#include \"Runtime/Engine/Public/EngineGlobals.h\" // using GEngineDLLImporter::DLLImporter()&#123; // 加载 if (importDLL(\"DLL\", \"DLLProducer1.dll\")) &#123; // 导入 if (importMethodGetCircleAreaFromDll()) &#123; // 调用 double ans = getCircleArea(1.0); UE_LOG(LogTemp, Warning, TEXT(\"method calling result: %f\"), ans); UE_LOG(LogTemp, Warning, TEXT(\" \")); &#125; else &#123; UE_LOG(LogTemp, Warning, TEXT(\"method &lt;getCircleArea&gt; load failed.\")); &#125; &#125; else &#123; UE_LOG(LogTemp, Warning, TEXT(\"DLL &lt;DLLProducer1.dll&gt; load failed.\")); &#125;&#125;bool DLLImporter::importDLL(FString folder, FString name)&#123; FString filePath = *FPaths::GamePluginsDir() + folder + \"/\" + name; if (FPaths::FileExists(filePath)) &#123; dllHandle = FPlatformProcess::GetDllHandle(*filePath); if (dllHandle != NULL) &#123; return true; &#125; &#125; return false;&#125;bool DLLImporter::importMethodGetCircleAreaFromDll()&#123; if (dllHandle != NULL) &#123; m_getCircleAreaFromDll = NULL; FString procName = \"getCircleArea\"; m_getCircleAreaFromDll = (_getCircleAreaFromDll)FPlatformProcess::GetDllExport(dllHandle, *procName); if (m_getCircleAreaFromDll != NULL) &#123; return true; &#125; &#125; return false;&#125;double DLLImporter::getCircleArea(double radius)&#123; if (m_getCircleAreaFromDll != NULL) &#123; double out = m_getCircleAreaFromDll(radius); UE_LOG(LogTemp, Warning, TEXT(\"Successly call method &lt;getCircleArea&gt; from DLL library.\")); return out; &#125; UE_LOG(LogTemp, Warning, TEXT(\"m_getCircleAreaFromDll NULL! Failed to call method &lt;getCircleArea&gt; from DLL library.\")); return 1.0;&#125;","categories":[{"name":"Unreal Engine","slug":"Unreal-Engine","permalink":"https://lokisparken.github.io/categories/Unreal-Engine/"}],"tags":[{"name":"UE4","slug":"UE4","permalink":"https://lokisparken.github.io/tags/UE4/"},{"name":"Configuration","slug":"Configuration","permalink":"https://lokisparken.github.io/tags/Configuration/"}]},{"title":"【UE4】Pixel Streaming","slug":"【UE4】Pixel-Streaming","date":"2020-07-16T12:20:16.000Z","updated":"2020-07-16T12:26:24.940Z","comments":true,"path":"2020/07/16/【UE4】Pixel-Streaming/","link":"","permalink":"https://lokisparken.github.io/2020/07/16/%E3%80%90UE4%E3%80%91Pixel-Streaming/","excerpt":"","text":"像素流送","categories":[{"name":"Unreal Engine","slug":"Unreal-Engine","permalink":"https://lokisparken.github.io/categories/Unreal-Engine/"},{"name":"Pixel Streaming","slug":"Unreal-Engine/Pixel-Streaming","permalink":"https://lokisparken.github.io/categories/Unreal-Engine/Pixel-Streaming/"}],"tags":[{"name":"UE4","slug":"UE4","permalink":"https://lokisparken.github.io/tags/UE4/"}]},{"title":"又是测试喵","slug":"Test","date":"2020-07-15T18:25:15.610Z","updated":"2020-07-16T12:26:57.564Z","comments":true,"path":"2020/07/16/Test/","link":"","permalink":"https://lokisparken.github.io/2020/07/16/Test/","excerpt":"","text":"测试 喵喵喵 (ฅ&gt;ω&lt;*ฅ) 略略略","categories":[{"name":"Configurations","slug":"Configurations","permalink":"https://lokisparken.github.io/categories/Configurations/"},{"name":"Hexo","slug":"Configurations/Hexo","permalink":"https://lokisparken.github.io/categories/Configurations/Hexo/"}],"tags":[{"name":"configuration","slug":"configuration","permalink":"https://lokisparken.github.io/tags/configuration/"}]}],"categories":[{"name":"Unreal Engine","slug":"Unreal-Engine","permalink":"https://lokisparken.github.io/categories/Unreal-Engine/"},{"name":"Pixel Streaming","slug":"Unreal-Engine/Pixel-Streaming","permalink":"https://lokisparken.github.io/categories/Unreal-Engine/Pixel-Streaming/"},{"name":"Configurations","slug":"Configurations","permalink":"https://lokisparken.github.io/categories/Configurations/"},{"name":"Hexo","slug":"Configurations/Hexo","permalink":"https://lokisparken.github.io/categories/Configurations/Hexo/"}],"tags":[{"name":"UE4","slug":"UE4","permalink":"https://lokisparken.github.io/tags/UE4/"},{"name":"Configuration","slug":"Configuration","permalink":"https://lokisparken.github.io/tags/Configuration/"},{"name":"configuration","slug":"configuration","permalink":"https://lokisparken.github.io/tags/configuration/"}]}